const express=require('express'); const prisma=require('../db/prisma'); const { toDate,nightsBetween,withinPeak,activeRateFor,stayTouchesSpecialEvent,overlapFilter } = require('../utils/policy'); const router=express.Router(); router.post('/reserve',async(req,res)=>{try{const {siteId,guestName,guestEmail,rigLengthFt,checkIn,checkOut,pcs}=req.body; const site=await prisma.site.findUnique({where:{id:Number(siteId)}}); if(!site) throw new Error('Site not found.'); if(site.lengthFt<Number(rigLengthFt)) throw new Error('Selected site is too short for the rig.'); const overlap=await prisma.reservation.findFirst({where:{siteId:site.id,...overlapFilter(checkIn,checkOut)}}); if(overlap) throw new Error('Sorry, this site just got booked. Try another one.'); const nightCount=nightsBetween(checkIn,checkOut); const inPeak=withinPeak(checkIn)||withinPeak(checkOut); const pcsFlag=(pcs==='on'||pcs==='true'||pcs===true); if(inPeak && !pcsFlag && nightCount>14) throw new Error('Peak season limit is 14 nights (PCS exempt).'); const rate=await activeRateFor(site.type,checkIn); const amount=rate*nightCount; const confirmationCode=Math.random().toString(36).slice(2,10).toUpperCase(); await prisma.reservation.create({data:{siteId:site.id,guestName,guestEmail,rigLengthFt:Number(rigLengthFt),checkIn:toDate(checkIn),checkOut:toDate(checkOut),pcs:pcsFlag,confirmationCode,nightlyRate:rate,amountPaid:amount,status:'CONFIRMED'}}); res.redirect(`/confirm/${confirmationCode}`);} catch(e){res.status(400).send(String(e));}}); router.get('/confirm/:code',async(req,res)=>{const {code}=req.params; const r=await prisma.reservation.findUnique({where:{confirmationCode:code},include:{site:true}}); if(!r) return res.status(404).send('Reservation not found.'); res.render('confirm',{r});}); router.post('/reservations/:id/cancel',async(req,res)=>{const id=Number(req.params.id); const r=await prisma.reservation.findUnique({where:{id},include:{site:true}}); if(!r) return res.status(404).send('Not found'); if(r.status==='CANCELLED') return res.redirect(`/confirm/${r.confirmationCode}`); const hoursBefore=(r.checkIn.getTime()-Date.now())/(1000*60*60); const isSpecial=await stayTouchesSpecialEvent(r.checkIn,r.checkOut); const oneNight=Number(r.nightlyRate||30.00); let fee=0; if(isSpecial) fee=oneNight; else if(hoursBefore<=72) fee=oneNight; else fee=10.00; await prisma.reservation.update({where:{id},data:{status:'CANCELLED'}}); res.render('cancelled',{r,fee,oneNight});}); module.exports=router;